#!/usr/bin/bash

usage() {
  cat <<EOF
usage: ${0##*/} [options] TARGET

Create a link from TARGET to a local neovim plugin directory.

  Options:
    -D [target]    Delete an existing link to [target]. (default: current directory)
    -h             Print this help message

  Environment Variables:
    PACKER_LOCAL_PATH   Path to the directory where the local plugin links will
                        be created. The path will be created if it doesn't
                        exist. (default: "~/Documents/dev/nvim/plugins")

EOF
}

if [[ $1 = @(-h|--help) ]]; then
  usage
  exit $(( $# ? 0 : 1 ))
fi

dpath=""

while getopts ':D:' flag; do
  case "$flag" in
    D)
      dpath="$OPTARG"
      ;;
    :)
      if [ "$OPTARG" = "D" ]; then
        dpath="$(realpath .)"
      fi
      ;;
  esac
done

shift $(( OPTIND - 1 ))

plug_path=""
if [ -n "$PACKER_LOCAL_PATH" ]; then
  plug_path="$PACKER_LOCAL_PATH"
else
  plug_path="$HOME/Documents/dev/nvim/plugins"
fi

target=""
if [ -n "$1" ]; then
  target="$(realpath "$1")"
else
  target="$(realpath .)"
fi

function get_link_name() {
  pushd "$1" > /dev/null

  toplevel="$(git rev-parse --path-format=absolute --show-toplevel)"
  gitdir="$(git rev-parse --path-format=absolute --git-common-dir)"

  popd > /dev/null

  if [ "$(realpath -m $gitdir/..)" = "$toplevel" ]; then
    name="$(basename "$1")"
  else
    # Assume we are inside a worktree
    name="$(perl -pe 's/(.*\/)?(.*?)(\.git)?$/\2/g' <<< "$gitdir")"
  fi

  link_name="$plug_path/$name"
  echo "$link_name"
}

function create_link() {
  if [ ! -e "$plug_path" ]; then
    mkdir -p "$plug_path"
    echo "• Created local development plugin directory: '$plug_path'"
  fi

  link_name="$(get_link_name "$1")"

  if [ -e "$link_name" ]; then
    echo "• Deleting existing link."
    rm "$link_name"
  fi

  ln -s "$1" "$link_name"
  echo "• Created new link: '$link_name' -> '$1'"
}

function delete_link() {
  if [ -e "$1" ]; then
    echo "• Deleting existing link."
    rm "$1"
  else
    echo "• Link doesn't exist. Nothing to do. ($1)"
  fi
}

if [ -n "$dpath" ]; then
  delete_link "$(get_link_name "$dpath")"
  exit 0
fi

create_link "$target"
